---
description: 
globs: 
alwaysApply: true
---
# 目标
你的目标是以用户易理解的方式帮助他们完成一个虚拟滚动的表格，确保应用功能完善，性能优异，用户体验好。

## 需求理解
- 充分理解用户需求，站在用户角度思考，分析需求是否存在缺漏，并与用户讨论完善需求。
- 提供方案供用户选择，对于过度设计的地方指出来。

## 代码编写
### 状态管理
- 必须使用 `@einfach/state` 进行状态管理
- 使用 atom 作为状态管理的基本单位
- 复杂状态计算应该使用 atom 的派生功能
- 不允许使用新的第三方库，如实在需要使用，请追问用户
- example的代码不允许过度设计，保持现状简单最好

### 类型系统
- 使用 TypeScript 进行严格的类型检查
- 为所有的 Props 定义明确的接口
- 使用 type 而不是 interface 定义组件 Props
- 避免使用 any 类型，必要时使用 unknown
- 为异步操作定义清晰的返回类型

### 组件设计
- 使用函数式组件和 React Hooks
- 组件应遵循单一职责原则
- 将复杂逻辑抽离到独立的 hooks 中
- 使用 memo 优化组件重渲染
- 组件应支持自定义样式和主题
- 提供合理的默认值和 fallback 方案

### 虚拟滚动实现
- 使用 Grid 布局实现表格结构
- 实现高效的行列虚拟滚动
- 支持固定列和表头
- 处理滚动事件时使用 passive 监听器
- 优化滚动性能，避免不必要的重渲染

### Hooks 规范
- 自定义 hooks 必须以 use 开头
- hooks 应该是可组合和可重用的
- 避免在循环、条件或嵌套函数中调用 hooks
- 保持 hooks 的依赖数组准确性

### 事件处理
- 使用 useCallback 包装事件处理函数
- 事件处理函数应该有明确的命名约定
- 实现必要的事件防抖和节流
- 提供完整的键盘事件支持

### 样式管理
- 使用 CSS 变量实现主题定制
- 样式类名应遵循 BEM 命名规范
- 关键样式应通过 props 控制
- 避免内联样式，除非是动态计算的值

### 代码组织
- 按功能模块组织代码结构
- 相关的组件和 hooks 应该放在同一目录下
- 导出的公共 API 应该在 index 文件中统一管理
- 工具函数应该放在 utils 目录下

### 错误处理
- 实现合适的错误边界
- 为异步操作提供错误处理机制
- 提供友好的错误提示
- 记录关键错误信息

### 性能优化
- 实现高效的数据更新机制
- 避免不必要的重渲染
- 优化大数据量下的渲染性能
- 实现必要的数据缓存机制

### 扩展性
- 支持插件机制
- 提供完整的自定义能力
- 保持向后兼容性
- 提供清晰的扩展接口

### 文档和注释
- 为所有公共 API 提供 JSDoc 注释
- 包含使用示例和注意事项
- 说明组件的性能考虑
- 记录重要的实现决策

### 测试规范
- 编写单元测试和集成测试
- 测试重要的用户交互
- 测试边界条件和错误情况
- 使用 Testing Library 编写测试用例

### 效果验证
- 以 packages/example 为基准进行功能验证
  - 新功能必须在 example 中提供完整的使用示例
  - 示例代码应该涵盖常见使用场景
  - 示例需要展示组件的主要功能和配置选项
  - 确保示例代码的可运行性和正确性

- 单元测试要求
  - 使用项目根目录的 Jest 配置进行单元测试
  - 测试用例应覆盖核心功能和边界情况
  - 为新增功能编写对应的单元测试
  - 确保测试覆盖率达到项目要求
  - 模拟真实使用场景进行交互测试
  - 包含性能相关的测试用例

- 验证流程
  1. 在 example 中实现功能演示
  2. 编写对应的单元测试
  3. 确保所有测试用例通过
  4. 验证示例的实际运行效果


